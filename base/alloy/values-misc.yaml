alloy:
  configMap:
    # https://grafana.com/docs/alloy/latest/collect/logs-in-kubernetes/
    content: |
      // ---- Cluster events ----
      // loki.source.kubernetes_events tails events from the Kubernetes API and converts them
      // into log lines to forward to other Loki components.
      loki.source.kubernetes_events "cluster_events" {
        job_name   = "integrations/kubernetes/eventhandler"
        log_format = "json"
        forward_to = [
          loki.process.cluster_events.receiver,
        ]
      }

      // loki.process receives log entries from other loki components, applies one or more processing stages,
      // and forwards the results to the list of receivers in the component's arguments.
      loki.process "cluster_events" {
        stage.static_labels {
          values = {
            cluster = sys.env("CLUSTER_NAME"),
            job = "k8s-events",
          }
        }
      
        stage.json {
          expressions = {
            type = "",
            node = "reportinginstance",
          }
        }
        stage.labels {
          values = {
            type = "",
            node = "",
          }
        }
      
        forward_to = [loki.write.vl_events.receiver]
      }
      
      // ---- Pod logs ----
      // discovery.kubernetes allows you to find scrape targets from Kubernetes resources.
      // It watches cluster state and ensures targets are continually synced with what is currently running in your cluster.
      discovery.kubernetes "pod" {
        role = "pod"
        selectors {
          role = "pod"
          label = "eks.amazonaws.com/fargate-profile"
        }
      }

      // discovery.relabel rewrites the label set of the input targets by applying one or more relabeling rules.
      // If no rules are defined, then the input targets are exported as-is.
      discovery.relabel "pod_logs" {
        targets = discovery.kubernetes.pod.targets

        // Label creation - "namespace" field from "__meta_kubernetes_namespace"
        rule {
          source_labels = ["__meta_kubernetes_namespace"]
          action = "replace"
          target_label = "namespace"
        }

        // Label creation - "pod" field from "__meta_kubernetes_pod_name"
        rule {
          source_labels = ["__meta_kubernetes_pod_name"]
          action = "replace"
          target_label = "pod"
        }

        // Label creation - "container" field from "__meta_kubernetes_pod_container_name"
        rule {
          source_labels = ["__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "container"
        }

        // Label creation -  "app" field from "__meta_kubernetes_pod_label_app_kubernetes_io_name"
        rule {
          source_labels = ["__meta_kubernetes_pod_label_app_kubernetes_io_name"]
          action = "replace"
          target_label = "app"
        }

        // Label creation - "container" field from "__meta_kubernetes_pod_uid" and "__meta_kubernetes_pod_container_name"
        // Concatenate values __meta_kubernetes_pod_uid/__meta_kubernetes_pod_container_name.log
        rule {
          source_labels = ["__meta_kubernetes_pod_uid", "__meta_kubernetes_pod_container_name"]
          action = "replace"
          target_label = "__path__"
          separator = "/"
          replacement = "/var/log/pods/*$1/*.log"
        }

        // Label creation -  "container_runtime" field from "__meta_kubernetes_pod_container_id"
        rule {
          source_labels = ["__meta_kubernetes_pod_container_id"]
          action = "replace"
          target_label = "container_runtime"
          regex = "^(\\S+):\\/\\/.+$"
          replacement = "$1"
        }

        rule {
          source_labels = ["__meta_kubernetes_pod_node_name"]
          action = "replace"
          target_label = "node"
        }
      }

      // Get pod logs via Kubernetes API
      loki.source.kubernetes "pod_logs" {
        targets    = discovery.relabel.pod_logs.output
        forward_to = [loki.process.pod_logs.receiver]
      }

      // loki.process receives log entries from other Loki components, applies one or more processing stages,
      // and forwards the results to the list of receivers in the component's arguments.
      loki.process "pod_logs" {
        stage.cri {}
        stage.timestamp {
          format = "RFC3339Nano"
          source = "timestamp"
        }
        stage.output {
          source = "message"
        }
      
        stage.static_labels {
          values = {
            cluster = sys.env("CLUSTER_NAME"),
            job = "pod-logs",
          }
        }
      
        forward_to = [
          loki.write.vl_default.receiver,
        ]
      }
      
      // ---- Destinations ----
      loki.write "vl_events" {
        endpoint {
          url = "http://vl-victoria-logs-cluster-vlinsert.victoria-logs.svc.cluster.local:9481/insert/loki/api/v1/push?_msg_field=msg&_stream_fields=cluster,job"
        }
      }
      
      loki.write "vl_default" {
        endpoint {
          // Prevent auto-parse of JSON messages: https://docs.victoriametrics.com/victorialogs/data-ingestion/promtail/index.html
          url = "http://vl-victoria-logs-cluster-vlinsert.victoria-logs.svc.cluster.local:9481/insert/loki/api/v1/push?_stream_fields=cluster,job,node,namespace,pod,container&disable_message_parsing=1"
        }
      }

  resources:
    requests:
      cpu: 10m
      memory: 80Mi
    limits:
      cpu: 100m
      memory: 128Mi
  storagePath: /run/alloy
  envFrom:
    - configMapRef:
        name: cluster-env
  mounts:
    extra:
      - name: alloy
        mountPath: /run/alloy

crds:
  create: false

image:
  pullPolicy: Always

controller:
  type: statefulset
  enableStatefulSetAutoDeletePVC: true
  volumeClaimTemplates:
    - apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        name: alloy
      spec:
        storageClassName: gp3
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
